#+STARTUP: INDENT OVERVIEW
#+TAGS: { ui(u) table(t) }

* 利为引擎
** 启动流程
1. 运行core/ClientLoaderWithLog.exe
   1. 加载core/PlatformConfig.ini
      - 读取ResPath :: 游戏资源路径(贴图, 骨骼, 音乐等)
      - 读取ScriptPath :: 游戏脚本路径
      - 其他窗口设置 :: 分辨率, 大小等
   2. 检测ScriptPath下是否存在init.py和main.py
      #+BEGIN_COMMENT
      如果存在fls文件也可以, fls文件是若干py文件的打包合集, 引擎内可以识别fls文件
      的内容.
      #+END_COMMENT
   3. 执行init.py文件
      - 重定向输出 :: 输出定向到文件, 字符的本地化等
      - 添加sys.path路径 :: 用于寻找python的包, 模块
      - 其他初始化工作
   4. 执行main.py文件
      #+BEGIN_SRC python
      # 文件内必须定义:
      def Start():
          pass
      def Loop(delta_time):
          pass
      #+END_SRC
      1. 调用Loop(delta)
      2. 调用Start()

** 注意点
*** CNode对象AddChild和SetParent不会增加对象的引用计数
如果认为创建了临时对象放到节点树中, 节点树会自动管理节点, 那你就想多了. 临时
对象出了作用域会直接被释放, 必须使用Entrust持久化.
*** 局部坐标系以左下角为原点.
局部坐标系中目标的位置指的是目标的正中央(默认锚点)相对于原点的位置(不是右上或者左下).
*** 节点渲染顺序
对于任何一个节点, 先渲染所有z值小于等于0的节点, 然后渲染自身, 然后渲染大于0的节点.
如果存在z值相同的兄弟, 则按加入树的顺序依序渲染.
*** SetPos所处的坐标系永远是父节点的原始坐标, 而不是经过放缩后的
*** GetChildren()返回的节点按z值从低到高排列
*** Layer层要使用SetLayerColor改变颜色
*** Layer层的SetGrey是无效的
用Layer.GetSprite().SetGrey(True)来变灰
*** 子类化触控事件时不要调用CreateWithFile函数
调用静态方法生成的对象不是新类型的对象, InitWithFile函数
*** 触控事件的触发顺序和节点渲染顺序相反
*** SetScale放缩方向和你指定的锚点有关, (0,0)向右上, (1,1)向左下
*** 在init.py中一定要将需要的库加入sys.path路径
*** 一定要特别注意传入定时器对象内的对象是否为弱引用
强引用非常容易导致进程阻塞
*** spine对象最后调用的AddAnimation如果不循环的话, 会导致动画停止
*** 合理的使用SetSwallowTouches
*** 单个摄像机渲染顺序
GlobalZ < 0 的任何对象
         ↓   
GlobalZ == 0 的无透明的3d网格对象
         ↓   
GlobalZ == 0 的透明3d网格对象, 以及从属的CSprite等2d对象
         ↓   
GlobalZ == 0 的其他任何对象(2d对象)
         ↓   
GlobalZ == 0 且设置了SetIsNoDepthTest(True)的对象(一般来说是3d透明网格对象)及其下挂节点
         ↓   
GlobalZ > 0 的任何对象
*** 全局z值是不会传递, 这是有时候设置glz无效的原因
对父对象设置glz不会影响子对象的glz, 比如图片按钮, 对按钮设置glz不会影响它的图片的glz
所以按钮还是有可能被覆盖的
** UI                                                                  :ui:
*** 命名
**** 文件命名
小写英文+下划线+数字, 不要有特殊字符, 长度不要超过四十, 目录不要超过两级.
#+BEGIN_EXAMPLE
Correct: info_001.ui, weibo_mine.py
Wrong: info 001.ui weibo_Mine.py
#+END_EXAMPLE
**** 控件命名
1. 不需要程序控制的控件(如背景层, 装饰图片等)可以使用默认命名, 可以随便更改, 删除.
2. 需要程序控制的控件(如按钮, 列表等):
   - 前缀统一m_开头
   - 驼峰命名法
   - 最后一个单词为控件类型, 如Layer, Text, Btn等
#+begin_example
Correct: m_SelectBar, m_IDScroll
Wrong: m_happen, m_ID_Scroll
#+end_example
**** 多用英文, 少用拼音
*** 层级管理
**** UI文件命名层级
以层级划分, 如玩法名/一级模块/二级模块.
**** 控件父子的节点层级
设计UI时尽量合理划分父子层级, 分而治之.(编辑器里alt+鼠标拖动即可将控件作为另一个节点的子节点)
*** 常规知识
**** 所有界面的根节点都是设备屏幕, 且其不能作为子节点
**** 界面复用
如果某一个控件需要多个相同的子控件, 不要复制多份相同的子控件, 而是通过程序创建多份子控件
**** 动态数据的使用
如果某个界面需要策划控制参数, 则可以使用动态数据保存参数
**** 模板就是预定义好的一个界面
**** 抽象控件可以将已经创建好的某个控件转为自定义控件
**** 按F5可以快速重新加载
**** 定位器用来定位子界面的位置, 无其他功能
** 代码规范
- 统一Tab缩进而不是4个空格
- 每个函数之间使用两空行分隔
- 使用utf-8, 文件头加上# -*- coding: utf-8 -*-
- 换行符使用\r\n
- import 独立一行, 不要用from xx import *语法
- 导入顺序为: 标准库->引擎->基础->功能
- 空格使用pep8规范
- 对于代码技巧性的部分使用注释
- 不允许直接打印变量(print), 采用打印接口打印
- 每个语句独占一行
- 命名:
  1. 标识符采用英文命名
  2. 函数命名像全局变量一样采用骆驼式, 动宾结构
  3. 变量作用域越大, 名字携带的信息就越多
  4. 全局变量g_开头, 后面采用骆驼式写法
  5. 全局常量全部大写, 下划线连接单词
  6. 实例对象临时添加属性, 所有字母小写
  7. 成员变量m_开头, 后面采用骆驼式写法, 具体规则为:
     #+NAME: class_member_naming_rules
     | type   | prefix | suffix       | example      |
     |--------+--------+--------------+--------------|
     | real   |        |              | m_Number     |
     | string |        |              | m_Name       |
     | bool   | Is     |              | m_IsUpdate   |
     | list   |        | List         | m_PlayerList |
     | tuple  |        | List         | m_PlayerList |
     | dict   |        | Dict         | m_PlayerDict |
     | UI     | UI     | control type | m_UIStartBtn |
  8. 普通变量亦采用骆驼式写法, 具体规则为:
     | type   | prefix      | suffix | example     |
     |--------+-------------+--------+-------------|
     | real   | i, f        |        | iMaxVal     |
     | string | s           |        | sName       |
     | bool   | b           |        | bDone       |
     | list   | (elem type) | List   | fTimeList   |
     | tuple  | (elem type) | List   | sNameList   |
     | dict   | (elem type) | Dict   | iPlayerDict |
  9. 比较单例使用is或is not
  10. 坚持使用return语句, 如果有返回值但是返回None则显式return None
- 约定:
  1. 回调函数除了OnClose均在代码里声明
  2. 资源类型文件采用固定路径命名, 而不是可替换文本
  3. 如果使用try, 则必须用misc.PrintContent()打印报错信息
  4. 使用format来格式化字符串
  5. TODO格式为: # TODO(your name)\r\n# Your purpose
  6. 每行最大长度为100
- 代码注释:
  1. 针对引擎对象进行处理, 每当第二次赋值时采用注释
      #+BEGIN_SRC python
        self.m_EngineObj = CreateEngineObj()
        self.m_EngineObjList.append(self.m_EngineObj)
        # sefl.m_EngineObj.addDYRef() 
      #+END_SRC
  2. 所有对象释放的时候需要添加
      #+BEGIN_SRC python
        # decDYRef(self.m_EngineObj)
        self.m_EngineObj = None
        # decDYRefList(self.m_EngineObjList)
        self.m_EngineObjList = []
      #+END_SRC
  3. 其他类接口来自增加引用和减少引用时不需要添加
      #+BEGIN_SRC python
        oSpr = CImage.node("xx")
        self.m_ScrollBox.AppendItem(oSpr)
      #+END_SRC
  4. 如果不是新创建的对象, 则需要添加
      #+BEGIN_SRC python
        engineobj = self.m_EngineObj
        self.m_ScrollBox.AppendItem(engineobj)
        # engineobj.addDYRef()
      #+END_SRC
- 协议:
  1. 不要在收发包之中做逻辑处理
  2. 有子协议的统一定义获取子协议的接口
  3. 不要定义多个接口使用同一个子协议号
- 一级界面都要加入界面栈互斥管理组SetGroupDlg(True, "main")
- url地址统一写到gameurl中
- 避免重复造轮子
- 使用mvc实现独立功能
- 回调函数的触发一般放到最后面, 以防取到非最新数据
- 不要直接在外部访问某个实例的类成员, 最好在类里统一封装出一个通用的Get接口
- bug高发区:
  * 界面所有属性需要提前定义, 不要动态创建
  * deepcopy时要检查里面是否包含实例
  * 最终呈现给玩家的字符串使用misc.GetLan("")包装
  * 默认参数不用可变类型
  * 不要遍历过程中删除可迭代容器内容
  * 界面的Close, ModuleReset函数下不能创建对象
  * 定时器是否可重入, 多次调用是否会生成多个定时器导致泄露
  * 闭包是否有self引用导致循环
  * C-S同步不要用倒计时
- 性能问题:
  * 不要用while True这种可能死循环的写法, 可以用一个比较大的数作为边界
  * 刷新函数职能单一
** 导表                                                             :table:
*** 常规知识
1. table用户表的格式字段可以自定义被引用时的输出格式({字段名})
** 构建流程
*** Android
**** 本地编译方法
1. 安装Android Studio
2. 下载android_demo到本地
3. 使用android studio打开android_demo/proj.androidStudio工程
   1. 在Setting->Build->Gradle->Use local Gradle distribution中填入本地的gradle, 使用版本4.10.1
   2. 在Project Structure->SDK Location中设置sdk路径和ndk路径, sdk从公司的sdk库里下载, ndk在官网下载r13
4. 将项目的py文件打包为Data/data.fls, 将项目的资源文件打包为Res/Res.pak, 其他资源比如字体, 声音, 动画,
   配置, paklist等一起前面两个打包文件拷贝到mainProject/assets/copy_res中
   1. 注意paklist.ini里面的内容要和实际Res.apk的路径相符, 如果Res.pak在Res目录下, 那么paklist.ini中路径
      应为Res/Res.pak
   2. assets中Default.jpg为加载资源时的背景图, 酌情替换
5. 修改mainProject/AndroidManifest.xml内神武为xxx, xxx为项目名
6. 修改mainProject/src/com/duoyi/shenwu为xxx
7. 修改mainProject/src/com/duoyi目录下所有java文件里的shenwu为xxx
8. 修改mainProject/res/drawable-xxx目录里面的icon文件为自己项目的图标文件
9. 修改mainProject/res/mipmap-xxx目录里面的icon文件为自己项目的图标文件
10. 修改mainProject/res/valuesxxx目录里面的xml文件内的appname属性为xxx
11. 使用模拟器构建的时候, 需要在assets/ini/update.ini中加入SkipIMConfirm=1, 否则会弹出火星
12. 以上完成之后即可成功构建并运行, 如果运行提示找不到资源文件, 请检查一下代码的init.py中是否加载了paklist
    (通过C_sys.LoadPackageFiles())
**** 持续交付
1. 先参照文档手游整包工程配置说明文档的android部分进行配置
2. 注意自己svn的忽略设置, 可能.a, .so文件没有提交
3. 设置外链:
   1. DemoProject/Classes/animation svn Classes/animation
   2. 游戏脚本svn proj.androidStudio/py
   3. 游戏资源svn proj.androidStudio/gameres
4. 在proj.androidStudio下加入config.ini
   1. 配置PYTHON_VERSION为加密版(不配置数据文件会异常)
   2. 配置DOWNLOADURL
   3. 配置密钥和密码(这个要申请)
5. 将代码提交到Svn之后, 在云效上申请持续交付
6. 持续交付可以复制游戏公共模块的配置, 但是有几个位置需要配置
   1. 基础信息改成自己项目的基础信息
   2. 源码配置
      1. 将自己的工程svn放到第一个
      2. 将AndroidExtendSDK的svn放到第二个, 找人开通权限
   3. 构建配置改一下包名
   4. 火星消息推送设置群号
7. 最重要的一点, 有问题及时问人
**** 真机包外网调试方法
- 将apk后缀改为zip, 解压后拷贝资源文件和代码文件到内网机, 本地编译调试
- 使用手机模拟器, 打开usb调试模式, 连接到as后, 在android studio右下角
  可以看到Device File Explorer, logcat会实时打印日志, 也可以参考
*** Ios
有很多内容和android是相同的, 如果这里没说明参考android
**** 本地编译方法
1. 找一台环境已经配置好的macos虚拟机, 假设使用xcode11.3
2. 先参照文档手游整包工程配置说明文档的ios部分进行配置
3. 申请证书和描述文件, 这里注意一下:
   1. 这两个都要双击使用, 并且在xcode工程中要严格匹配
   2. 如果signing界面一直loading, 很有可能是虚拟机太卡导致的, 等一晚上应该就可以了
4. 在Classes/AppDelegate.h中可以控制部分库的加载(android不需要), 如果有库导入错误注意这里
5. 将打包好的data.fls放到Data/中, 将Res.pak放到Resources中
6. 以上完成之后即可成功构建并运行
**** 持续交付
基本和本地编译一致, 但要注意以下几点:
1. 构建机对Resources中的资源监测很严格, 注意删除违规资源
2. xcode中build setting中CFBundleVersion对应的$(CURRENT_PROJECT_VERSION)这个变量
   自己设置, 现在不会自动替换
**** 真机包外网调试方法
- 下载iTools, 如果应用打开了文件共享, 找到此应用双击可以浏览此应用的日志
** 坑
1. Richtext调整大小之后SetAlignMode会失效
2. 新建新的UI文件夹时如果导入失败, 可能是没有加__init__.py
3. IOS如果首次登陆时没有弹出网络权限配置请求, 可以使用C_sys.IsEnableNetwork来主动触发
4. 严格注意信号的使用, 很多信号关联着大量的页面刷新, 滥用信号很有可能导致卡顿, 信
   号绑定的粒度尽可能大, 有效减少函数调用次数
5. extinterface.CShadowObject是无法对非引擎对象使用的
   
   
