#+STARTUP: INDENT NUM

* 项目管理
1. 使用unity hub进行项目的创建, 管理, 删除
2. unity hub可以分别管理不同版本引擎创建的项目
3. unity hub能够以多种形式创建项目, 比如2d, 3d. 这些设置影响编辑器内某些设置, 比
   如相机的透视, 资源的导入形式等等

* 资源导入
** 常见的导入形式
   - 在项目窗口, 右键点击->导入新资源
   - 在项目窗口, 右键点击->导入包->自定义包(这个包一般是由unity导出的)
** 资源管理
*** 目录管理
   在Assets目录下, 包含了游戏全部需要的资源, 这个目录可以像文件浏览器中那样随意创
   建文件夹, 移动, 删除. 通常我们会创建以下几个目录:
   - Scenes: 游戏自动创建, 用来保存场景
   - Scripts: 保存游戏脚本
   - Prefabs: 保存预制体
   - Materials: 保存材质
*** 场景管理
   - 通过点击顶部菜单File->New Scene来创建新的场景, File->Save来保存它
   - 通过在Scenes目录内找到Scene, 点击del来删除场景
   - 通过在Scenes目录内找到Scene, 双击来打开新场景

* 界面
** 布局
右上角的Layout可以调整整个编辑器的布局, 下面的说明均以Default布局为基础进行说明
** 菜单栏
在编辑器的最上方是菜单栏, 可以使用大部分经典的软件命令, 比如编辑编辑器配置, 打开
保存文件等等
** 工具栏
位于菜单栏下面的是工具栏, 可以访问移动, 旋转, 缩放工具; 中间的三个按钮用来控制
场景的播放. 使我们可以不打开游戏就可以在编辑器内预览游戏的实际表现; 最右边代表着
unity的服务, 比如云构建
** 层次结构窗口
位于编辑器左方, Hierarchy窗口显示着场景内部所有的游戏对象, 以及它们的父子关系
** 场景/游戏/商店视图
位于编辑器的中央, 包含了三个子窗口:
*** 场景
我们操纵游戏对象, 创建关卡的窗口, 点击里面的对象会在层次结构窗口高亮显示,
并且会打开游戏对象的检视窗口, 用以浏览对象的属性
1. 如果场景内部分对象无法显示, 是因为znearest值太高导致被裁减了, 可以找到你想
   观察的对象按F来重置值
*** 游戏
主摄像机在场景内部看到的全部内容, 点击工具栏里的播放按钮会自动调到这个页面. 通过
在菜单栏里Edit->Preferences->Colors->playmode tint, 可以在进入播放模式时变色,
用来提醒你进入了播放模式(因为在播放模式下对对象的修改是不会保存的)
*** 商店
可以查看在Assets Store中可以购买和自己拥有的不同资源
** 检视窗口
上下文相关的窗口, 随着选中的对象不同而表现不同的属性. 代表着选中对象的可编辑参数
** 项目/控制台窗口
*** 项目
可以访问项目的源资源, 在这里如果对源资源进行修改会影响到所有使用到这个资源的场景
*** 控制台
显示脚本中的警告, 错误, 调试日志等

* 场景导航
** 场景移动
场景导航代表着我们在场景视图中移动的方式:
- alt+鼠标左键: 环绕3d空间中特定点
- alt+鼠标中键: 拖动, 平移
- alt+鼠标右键 或 滚轮: 放大, 缩小
- 鼠标右键: 以自身为轴环顾周围
- w/s/a/d+鼠标右键: 世界飞行模式浏览
- f: 快速定位到选中对象
- ctrl+shift+f: 快速将对象定位到当前视野的原点(常用于摄像机,使场景和游戏一致)
** 对象控制
选中对象之后, 工具栏上六个按钮以及两个选项卡均为可用状态.
*** 选项卡
- Center/Pivot: 控制对象时, 以对象中心为控制点还是以对象的锚点作为控制点
- Global/Local: 控制对象时, 使用全局坐标系还是局部坐标系
*** hand tool(热键:q)
拖动场景, 对象不会变化
*** move tool(热键:w)
移动工具, 有两种使用方式:
- 点击x/y/z任意轴并拖动, 可以在这个轴上进行平移
- 点击中心立方体的一面并拖动, 可以在两轴形成的面上移动
*** rotate tool(热键:e)
旋转工具, 以三个轴来旋转对象(俯仰角[Pitch], 偏航角(Yaw), 滚转角[Roll])
*** scale tool(热键:r)
缩放工具, 有两种使用方式:
- 点击轴末端的小立方体, 在这个轴上进行缩放
- 点击中心的立方体, 在三个轴上同时缩放
*** rect tool(热键:t)
2d资源使用, 3d一般不会使用这个工具
*** move, rotate, scale tool(热键:y)
可以同时进行移动,旋转和缩放

* 游戏对象
unity中的一切对象都被视为游戏对象, 通过附加不同的组件来表现不同的行为.
** 创建对象
1. 通过在Hierarchy窗口->Create来创建各种对象
2. 通过检视窗口->AddComponent来给对象添加组件
** 制作预制体
1. 将对象拖到项目内的Prefabs中, 通过这种方式来创建预制体
2. 通过将Prefabs中的预制体拖动到场景视图中来复制预制体
3. 对Prefabs中预制体的修改将影响所有预制体
4. 对场景中的某个预制体修改不会影响其他的预制体, 但是如果在检视窗口中点击了
   Prefab->Override->Apply All, 将会影响到所有预制体
* 原型设计
在游戏开始制作之前, 最好先弄明白自己的游戏的核心以及目标是什么, 并编写文档来记录,
并随着游戏的不断开发来完善它.
根据文档我们可以制作一个原型, 用来验证我们的一些想法. unity在这方面很方便, 我们
可以通过搭建一个简单的场景, 创建一些有限的游戏对象来进行实验
* 鼠标交互
** 脚本创建
1. 在Assets->Scripts目录下创建一个新的脚本, MouseManager.cs
2. 编写脚本, 实现鼠标交互逻辑
** 脚本对象
1. 在unity编辑器中创建一个空对象, 使用Add Component来追加我们刚刚编写的脚本组件
2. 根据我们在脚本里面暴露的公共变量来设置组件的属性
** tag和layer
- 可以给游戏内对象创建新的tag, 并给对象设置tag供脚本使用
- 可以给游戏内对象创建新layer, 并给对象设置layer供脚本使用
** material
1. 在Assets->Materials目录下Create->Material
2. 编辑材质的Albedo属性来控制其颜色
3. 将材质直接拖动到游戏内的可渲染对象来使其拥有材质

* 玩家运动
** 自动导航
1. NavMesh Surface组件可以烘焙来产生可达平面
2. NavMesh Agent附着到对象上可以让对象移动
3. NavMesh Modifier可以修改附着对象的阻挡属性

* 玩家交互
根据tag获得对象, 然后根据对象获得对象的变换, 最后可以根据变换获得对象的世界坐标

* NPC原型设计
1. MonoBehavior中的Awake函数在所有对象实例化之后会立即调用, Start在enable后的第一
   帧之前调用, 所以Awake调用是在Start之前的, 如果想要初始化, 使用Awake函数
2. 点击Inspecor的小锁可以锁定窗口, 点击其他对象也不会切换, 一般用于将其他对象拖动
   到锁定的对象之中
3. 在购买资产之前先进行原型设计, 用一些简单的内置对象来模拟行为, 这一点非常重要

* NPC跟踪
1. Vector3.Distancek可以用来判断两个变换之间的距离
2. InvokeRepeating可以用来重复调用某个接口

* 建模
1. 通过Window->Package manager可以安装各种工具包
2. 使用ProBuilder和ProGrids来进行建模
   - ProBuilder工具包提供了各种类型的方块来建模, 提供多种控制方式
   - ProGrids显示网格, 方便对齐
3. ProBuilder细节
   - 面模式可以拉伸一个面
   - 边缘模式可以勾选边缘, 添加边缘
   - 点模式可以选中全部的点来拖动

* 配置资源
** 材质
1. 材质可以绑定多个属性, 常用的是:
   - albedo贴图
   - 法线贴图
   - 镜面反射贴图
   - 遮罩贴图
** 模型
1. 模型可以设置材质

* 环境预制件
通过组合模型, 并将其塞入一个空对象内构成一个预制件, 不断拼接预制件来构成场景
1. 选中模型按住V可以启动顶点对齐模式
2. 旋转时按住ctrl可以实现以15度为单位进行旋转
3. 点击Scene场景右上角的坐标轴可以切换视图为俯视, 侧视, 正视, 正交, 透视

* 光照
1. Window->Rendering->Light Setting里可以调整光照设置
2. 将场景设置为静态后进行烘焙可以降低渲染的性能开销
3. 设置反射探针可以模拟镜面反射光照, 降低开销

* 粒子
1. 使用粒子系统来渲染类云雾特效
2. 粒子系统里面有大量参数可以调整粒子效果, 比如时间, 大小, 旋转, 颜色, 渐变, 纹理等等

* 线条
1. 通过粒子系统里的Line来创造光条纹, 结合聚光灯可以产生类似于月光的效果

* 角色
通过导入模型来建立角色, 将之前在建模时的组件附加到模型上即可实现角色的功能

* 动画控制器
1. 通过给模型设置动画控制器来控制模型的动作
2. 动画控制器是一个状态机, 通过参数来控制内部动画的状态
3. 通过将武器等附件附加到模型的关节上来实现同步运动

* UI
1. 在Scene->2D场景下编辑UI
2. 必须要加入一个Canvas控件来作为所有UI的父节点
3. 使用Gizmos->Rect工具拖动控件可以启用自动对齐功能
4. 开始缩放后按住alt可以进行中心缩放
5. RectTransform组件用来处理控件的父节点发生变化时, 自身如何变化的问题
   1. 通过Anchor Presets可以方便的设置锚点来进行缩放控制, alt, shift, alt+shift
      分别显示了三种不同的设置形式

* 场景切换
1. 使用UnityEngine.SceneManagement来控制场景的切换, 其中LoadScene函数用来制定加载
   哪一个场景
2. 场景的设置在File->BuildSettings之中, 需要将我们的场景加入到列表之中

* 音频
使用AudioSource来添加音频

* 后处理
首先通过Window->Package manager来安装postprocessing包
1. 在主摄像机添加后处理层组件, 并设置触发层级为PostProcessing Layer
2. 添加一个空对象并为其增加后处理卷积组件, 设置空对象为PostProcessing层
   1. 创建新的profile
   2. 在profile添加各种特效

* 镜头跟随
首先通过Window->Package manager来安装cinemachine, 这个提供了一个虚拟摄像机来完成
高级功能
1. 创建virtualcamera对象
2. 设置其Follow和Lookat对象
3. 设置其跟随参数, 不同的参数有不同的效果
4. 通过noise可以模拟人手持相机的效果

* 构建
1. 点击File->Build Settings进入构建页面
2. 选择你想要构建的场景
3. 选择想要构建的平台
4. 可以配置是否启用开发构建, 如果启用的话可以调试, 性能调优
5. 在Player Settings进行具体设置, 比如图标, 公司, 分辨率, 优化等等

* 主要问题
1. 构建之后的exe文件navmesh surface失效, 角色无法通过烘焙出来的路径
2. 指针管理器无法对人物角色模型生效
