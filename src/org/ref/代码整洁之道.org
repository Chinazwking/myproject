#+STARTUP: INDENT NUM

* 整洁代码
1. 代码永远不会消失, 因为代码代表着对需求最精确的约束
2. 不要因为进度或是经理的要求而放松对代码质量的把控
3. 为了赶时间而让代码混乱只会让你永远赶不上时间
4. 整洁的代码有以下特征:
   - 只做一件事
   - 短小精悍
   - 命名规范易读
   - 实体尽量少, 依赖尽量少
   - 能够通过测试
   - 没有重复代码
5. 阅读代码的时间要远远大于修改代码的时间, 所以让代码易读可以有效提高工作效率
6. 随时保持代码整洁, 改完后保证代码比改之前更干净

* 有意义的命名
1. 名副其实, 命名要清楚的表现它的作用, 如果还需要注释证明还不够名副其实
2. 避免误导, 不要用一些带有歧义的命名, 比如l和O很容易被看成1和0
3. 做有意义的区分, Variable永远不应该出现在变量中, NameString当然是String
4. 使用读的出来的名字, 不要用一些奇奇怪怪的缩写和自造词
5. 使用可搜索的名称, 不要使用魔法数字, 单字母的命名应该仅存在于短的局部函数中,
   名称长短应与其作用域成正比
6. 避免使用编码, 不必使用匈牙利命名法, 不要使用m_代表私有, 不要使用I,C来标记类
7. 避免思维映射, 明确是王道, 不要指望别人看到一个特殊的名字能够产生和你一样的理解
8. 类名应当是名词或名词性短语, 不应当是动词
9. 方法应该是动词或者动词短语
10. 不要起一些特殊的名称, 比如俚语和文化密切关联的名称
11. 每个概念对应一个词, 比如读取属性都用get, 设置都用set
12. 别用双关语, 比如add仅代表两个对象相加, 如果向一个集合中加入一个对象应该使用
    append, 而不是add
13. 只有程序员才会读你的代码, 所以尽管使用计算机科学的术语来命名吧
14. 如果无法采用计算机科学术语命名, 那么就采用涉及问题领域的名称, 这样至少可以
    请教此领域的专家名称的含义
15. 添加有意义的语境, 任何变量都不可能自解释, 他至少需要一个上下文来表明的他的作
    用, 可以将一些变量放到一个命名良好的类或者命名空间中, 这样可以明确表明变量的
    作用
16. 不要添加没有意义的语境, 只要短名称足够清晰, 短的一定要比长的要好, 比如说一个
    类叫做GSD, 那他的方法以GSD开头显然就不是一个好做法, 因为这个GSD和当前语境
    毫无关系
17. 碰到可以改的名字尽量优化, 不要让不好的名字阻碍你前进的步伐


* 函数
1. 短小: 函数最长20行, 每行不超过150个字符. if else while等结构中应该只有一行语句
   并且应该是一句函数调用, 这样可以使整个结构更加清晰
2. 只做一件事: 函数应该做一件事. 做好这件事. 只做这一件事
   - 一个函数内部的所有逻辑应该都唯一同一抽象层次
   - 判断一个函数是否只做了一件事, 可以看看是否能够拆出一个新的函数, 并且该函数不
     是仅仅重新诠释
3. 每个函数一个抽象层级: 所有的函数都要位于同一抽象层级上, 最好函数的阅读要符合
   TO原则, 即每一段函数的内部都是他下一个抽象层级的函数, 这样阅读代码就可以自顶向
   下逐步阅读
4. 对于switch, 最好只用一次, 用于工厂函数的分发多态, 并且隐藏在细节中其他部分看不
   到. 当然有时候可能也要违反这个规则
5. 长而具有描述性的名称, 远远比短而令人费解的名称要好, 当然短而明确最好
6. 函数参数: 最好没参数, 其次是一个和两个参数, 最好避免三个及以上参数. 输出参数远
   比输入参数要难以理解
   - 单参数要么是代表根据传入的内容返回一个内容, 要么代表根据传入的参数修改状态
   - 绝对不要向参数传入标识参数(bool), 应该拆为两个参数
   - 尽量将二元函数转换为一元函数
   - 如果函数有三个及以上的参数, 说明其中一些的参数应该封装成一个类, 他们应该是同
     属于一个更高概念的一部分
   - 给函数取个好名字能够更方便的了解函数的意图
7. 无副作用: 如果函数存在副作用, 那么在命名时一定要体现出来, 如果函数有输出参数,
   应将其转为对所属对象的修改
8. 分隔指令和询问: 一个函数要么回答某个问题, 要么做一件事, 不要既回答问题又做事
9. 带有错误码的函数实际上违反了上一条原则, 所以应该使用异常来代替错误码
   - 将异常捕捉和业务逻辑分离:
   - 存在异常处理的函数第一句应该就是try, 并且整个函数只做异常处理这一件事
     #+begin_src python
       try:
           dosomething()
       except:
           pass
       
       def dosomething():
           pass
     #+end_src
10. 不要有重复代码, 当出现的时候将重复的代码应该抽离作为一个新的模块, 重复就是
    软件工程的万恶之源
11. 如果函数结构很长, 那么最好遵循结构化原则, 即每个函数内部只能有一个return,
    循环中不要有break, continue. 永远不要用goto, 但对于小函数不需要遵循这些规则
12. *永远不要一开始就打算写出完美的函数*, 而是应该先写出能够实现功能的函数, 然后
    再测试用例的辅助下, 在维护函数功能稳定的同时, 消除冗余, 修改名称, 拆分函数,
    重新安置方法位置, 最后重新组装
编程艺术是且一直是语言设计的艺术, 永远不要忘记我们真正的目标在于讲述系统的故事,
而我们编写的函数干净利落的拼装到一起, 帮我们描述这个故事
