#+STARTUP: INDENT NUM
#+PROPERTY: header-args:python :preamble "# -*- coding: utf-8 -*-" :exports both :results output

* 重构原则
** 何谓重构
定义: 对软件内部结构的调整, 目的是在不改变软件可观测行为的前提下, 提高其理解性,
降低其修改成本.
*** 两个帽子
使用重构技术开发软件时, 你把你的时间分配给两种截然不同的行为, 添加新功能, 以及
重构. 添加新功能时, 不修改现有代码, 只增加新功能, 通过测试. 重构时只改进结构
而不添加新功能.
** 何为重构
*** 重构改进软件设计
没有重构程序的设计将会慢慢腐败, 重构像是在整理代码, 让一切回到正确的位置上. 通过
重构你可以消除重复动作, 而这一点正是优秀设计的根本.
*** 重构使软件更容易理解
程序设计就是与计算机交谈, 编写代码本质上就是填补"你想要它做什么"和"告诉它怎么做"
之间的缝隙. 但是你的代码无论如何, 只要准确计算机都是能够理解的, 但是你的代码是要
被其他人理解的, 修改的. 通过重构之后, 你能让代码更容易让他人理解, 这能极大地提高
生产效率. 更关键的是, 很多时候这个他人就是你自己.
*** 重构帮助寻找bug
通过重构你将对代码有着更深刻的理解, 搞清楚结构的同时自然也能发现不合理结构导致的
bug
*** 重构提高编程速度
注意, 良好的设计才是快速开发的根本, 重构能够改进, 维护良好设计, 自然可以提高编程
速度
** 何时重构
不要专门抽时间重构, 重构应该随时随地进行
*** 三次原则
第一次做某事只管去做, 第二次尽管反感但还是可以做, 第三次再做类似的就应该重构
*** 添加功能时重构
重构除了可以理清思路, 也可以让添加新功能更加简单流畅
*** 修补错误时重构
代码没有清晰到一眼让你看出bug, 那么应该重构
** 重构的精髓就是增加间接层
计算机科学是这样一门科学, 它相信所偶有的问题都可以添加一个间接层来解决.
尽管间接层是一柄双刃剑, 它会增加复杂度. 但是它有几个非常强大的价值:
- 允许逻辑共享
- 分开解释意图和实现
- 隔离变化
- 封装条件逻辑
** 重构的难题
重构虽然有很多好处, 但它不是银弹, 必然有其局限的地方, 在不断的尝试中才能发现它的
问题.
*** 数据库
很多程序的逻辑和数据库非常紧密的结合到一起. 导致难以进行重构
*** 修改公共接口
对于大量被别人调用的接口, 一般来说你不能直接修改它, 而是应该加一个新的接口, 让
旧的接口调用新的接口, 给别人时间切换到新的接口上来, 然后再废弃旧接口
*** 何时不该重构
- 现有代码不能运行, 那应该先确保其能够正常运行之后在重构
- 项目临近最后期限, 这个时候重构的收益远远小于风险
** 重构和设计
重构使得预先的设计不必完美, 只要简单合适就可以开始了. 随着编程的继续, 你对问题的
理解会加深. 通过不断重构来不断优化设计. 最终你会得到一个简单, 足够灵活的设计
** 重构和性能
除了对性能有严格要求的软件, 编写高性能软件的秘密就是: 首先写出可调的软件, 然后调
整它来获得足够的速度.
衡量性能一定不要通过臆测, 而是用于个度量工具来检测性能数据, 要知道浪费的80%的时间
集中在20%的代码上, 你需要做的就是通过工具找到20%, 优化它.
一个不断重构, 结构良好的程序很容易定位到性能热点, 从而帮助你更轻松的优化速度

