#+STARTUP: INDENT NUM
#+PROPERTY: header-args:python :preamble "# -*- coding: utf-8 -*-" :exports both :results output

* 重构原则
** 何谓重构
定义: 对软件内部结构的调整, 目的是在不改变软件可观测行为的前提下, 提高其理解性,
降低其修改成本.
*** 两个帽子
使用重构技术开发软件时, 你把你的时间分配给两种截然不同的行为, 添加新功能, 以及
重构. 添加新功能时, 不修改现有代码, 只增加新功能, 通过测试. 重构时只改进结构
而不添加新功能.
** 何为重构
*** 重构改进软件设计
没有重构程序的设计将会慢慢腐败, 重构像是在整理代码, 让一切回到正确的位置上. 通过
重构你可以消除重复动作, 而这一点正是优秀设计的根本.
*** 重构使软件更容易理解
程序设计就是与计算机交谈, 编写代码本质上就是填补"你想要它做什么"和"告诉它怎么做"
之间的缝隙. 但是你的代码无论如何, 只要准确计算机都是能够理解的, 但是你的代码是要
被其他人理解的, 修改的. 通过重构之后, 你能让代码更容易让他人理解, 这能极大地提高
生产效率. 更关键的是, 很多时候这个他人就是你自己.
*** 重构帮助寻找bug
通过重构你将对代码有着更深刻的理解, 搞清楚结构的同时自然也能发现不合理结构导致的
bug
*** 重构提高编程速度
注意, 良好的设计才是快速开发的根本, 重构能够改进, 维护良好设计, 自然可以提高编程
速度
** 何时重构
不要专门抽时间重构, 重构应该随时随地进行
*** 三次原则
第一次做某事只管去做, 第二次尽管反感但还是可以做, 第三次再做类似的就应该重构
*** 添加功能时重构
重构除了可以理清思路, 也可以让添加新功能更加简单流畅
*** 修补错误时重构
代码没有清晰到一眼让你看出bug, 那么应该重构
** 重构的精髓就是增加间接层
计算机科学是这样一门科学, 它相信所偶有的问题都可以添加一个间接层来解决.
尽管间接层是一柄双刃剑, 它会增加复杂度. 但是它有几个非常强大的价值:
- 允许逻辑共享
- 分开解释意图和实现
- 隔离变化
- 封装条件逻辑
** 重构的难题
重构虽然有很多好处, 但它不是银弹, 必然有其局限的地方, 在不断的尝试中才能发现它的
问题.
*** 数据库
很多程序的逻辑和数据库非常紧密的结合到一起. 导致难以进行重构
*** 修改公共接口
对于大量被别人调用的接口, 一般来说你不能直接修改它, 而是应该加一个新的接口, 让
旧的接口调用新的接口, 给别人时间切换到新的接口上来, 然后再废弃旧接口
*** 何时不该重构
- 现有代码不能运行, 那应该先确保其能够正常运行之后在重构
- 项目临近最后期限, 这个时候重构的收益远远小于风险
** 重构和设计
重构使得预先的设计不必完美, 只要简单合适就可以开始了. 随着编程的继续, 你对问题的
理解会加深. 通过不断重构来不断优化设计. 最终你会得到一个简单, 足够灵活的设计
** 重构和性能
除了对性能有严格要求的软件, 编写高性能软件的秘密就是: 首先写出可调的软件, 然后调
整它来获得足够的速度.
衡量性能一定不要通过臆测, 而是用于个度量工具来检测性能数据, 要知道浪费的80%的时间
集中在20%的代码上, 你需要做的就是通过工具找到20%, 优化它.
一个不断重构, 结构良好的程序很容易定位到性能热点, 从而帮助你更轻松的优化速度

* 代码的坏味道
** 重复代码
定义:
在一个以上的地点看到相同的代码, 相同的表达式, 应将其提取为一个函数
方案:
1. Extract Method
2. Pull Up Method
3. Form Template Method
4. Substitute Algorithm
5. Extract Class
** 过长函数
定义:
每当你觉得需要对代码进行注释, 或者出现嵌套条件, 循环时, 你应该将函数变小
方案:
1. Extract Method
2. Replace Temp with Query
3. Introduce Parameter Object
4. Preserve Whole Object
5. Replace Method with Method Object
6. Decompose Conditional
** 过大的类
定义:
想要用单个类做太多的事, 应拆分为不同的类
方案:
1. Extract Class
2. Extract Subclass
3. Extract Interface
4. Duplicate Observed Data
** 过长参数列表
定义:
参数过长导致修改, 理解都非常困难, 应该拆分为多个函数
方案:
1. Replace Parameter with Method
2. Preserve Whole Object
3. Introduce Parameter Object
注意:
如果你不希望被调用对象和调用对象产生依赖关系, 可以将数据从对象拆出来作为参数
** 发散式变化
定义:
某个类经常因为不同的原因在不同的方向发生变化. 应该一个类只因为一个原因发生变化.
方案:
1. Extract Class
** 霰弹式修改
定义:
每当你遇到某种变化, 你都需要在不同的类中进行小修改. 应该只在一个类内进行修改.
方案:
1. Move Method
2. Move Field
3. Inline Class
** 依恋情结
定义:
函数对某个类的兴趣比自己所在的类的兴趣还要大, 请将它移动到它更喜欢的类中
方案:
1. Move Method
2. Extract Method
** 数据泥团
定义:
在好多地方看到相同的三四项数据, 应该将他们封装
方案:
1. Extract Class
2. Introduce Parameter Object
3. Preserve Whole Object
注意:
一个好的判断方式是, 删掉众多数据项中的一个, 其他数据有没有失去意义. 失去是明确的封装信号
** 基本类型偏执
定义:
不喜欢因为一些小任务创建对象, 哪怕只有两三个关联的数据也应该创造新的类型
方案:
1. Replace Data Value with Object
2. Replace Type Code with Class
3. Replace Type Code with Subclasses
4. Replace Type Code with State/Strategy
5. Extract Class
6. Introduce Parameter Object
7. Replace Array with Object
** switch惊悚
定义:
多处代码存在相同的switch语句, 难以修改. 应用多态取代之
方案:
1. Extract Method
2. Move Method
3. Replace Type Code with Subclasses
4. Replace Type Code with State/Strategy
5. Replace Conditional with Polymorphism
6. Replace Parameter with Explicit Methods
7. Introduce Null Object
** 平行继承体系
定义:
每当你为一个类增加子类, 也要为另一个类添加子类. 一般让一个体系的继承实例引用另一个
方案:
1. Move Method
2. Move Field
** 冗余类
定义:
某个类实际已经没什么功能但依然存在, 请让他庄严的消失吧.
方案:
1. Collapse Hierarchy
2. Inline Class
** 夸夸其谈未来性
定义:
因为未来可能做某事提前加上了某些类或者接口. 请让所有用不上的东西消失
方案:
1. Collapse Hierarchy
2. Inline Class
3. Remove Parameter
4. Rename Method
** 令人迷惑的暂时字段
定义:
类内的某个变量仅为某种特定的情况而设定. 请将这些变量抽离出去作为一个单独的对象
方案:
1. Extract Class
2. Introduce Null Object
** 过度耦合的消息链
定义:
a.b().c().d().e(), 客户端与查找过程紧密耦合. 应符合迪米特法则
方案:
1. Hide Delegate
2. Extract Method
3. Move Method
** 中间人
定义:
某个类有一半的函数都委托给其他类. 此时应直接和负责功能的对象打交道
方案:
1. Remove Middle Man
2. InlineMethod
3. Replace Delegation with Inheritance
** 狎昵关系
定义:
两个类过于亲密, 探究彼此private的成分. 应拆散
方案:
1. Move Method
2. Move Field
3. Change Bidirectional Associatioon to Unidirectional
4. Extract Class
5. Hide Delegate
6. Replace Inheritance with Delegation
** 异曲同工的类
定义:
两个函数做一件事, 却有着不同的签名.
方案:
1. Rename Method
2. Move Method
3. Extract Superclass
** 不完美的库类
定义:
库的功能无法满足我们的需求, 但又无法直接进行修改
方案:
1. Introduce Foreign Method
2. Introduce Local Extension
** 纯粹的数据类
定义:
只拥有读写数据的接口, 无其他功能, 被其他类过分操纵
方案:
1. Encapsulate Field
2. Encapsulate Collection
3. Remove Setting Method
4. Move Method
5. Extract Method
** 被拒绝的遗赠
定义:
子类不想继承超类的部分函数和数据.
方案:
1. Replace Inheritance with Delegation
** 过多的注释
定义:
把注释当做除臭剂来用, 因为代码糟糕才加注释
方案:
1. Extract Method
2. Rename Method
3. Introduce Assertion
* 构筑测试体系
在进行重构之前, 必须有一个可靠的测试环境, 以确保重构不会对程序的功能产生影响.
** 自测试代码的价值
认真观察程序员把最多的时间消耗在哪里, 你会发现编码只占很小的一部分, 耗时最多的实
际上是调试. 在每次修改程序后执行自测试代码, 可以快速发现90%以上的bug, 因为代码
刚刚提交, 解决也会非常迅速. 因此自测试代码实际上是提高生产力非常有效的方式.
实际上, 和直觉相反的一点是, 撰写测试代码最有用的时机是在开始编程之前. 编写测试代
码的过程实际上就是在问添加的功能需要做什么, 让你将注意力集中到接口而非实现上. 这
永远是有益的. 并且也为你的工作订下了一个明确的结束目标. 当测试代码正常通过, 工作
也就结束了.
** 单元测试和功能测试
这里我们说的测试体系一般指的是单元测试, 用于提高程序员的生产力, 是高度局部化, 白
箱化的测试体系. 而功能测试一般用于保证整个软件正常运行, 尽可能将整个系统当做一个
黑箱.
** 测试的范围
测试用例的数量不是越多越好, 对于一些显而易见不会发生错误的函数是没必要测试的. 应
该基于风险驱动, 来进行测试. 即测试的目的是找到现在或未来可能出现的错误. 要诀就是
"测试你担心的最容易出错的部分". 花合理时间抓出大多数bug好过穷尽一生抓出所有bug.
** 边界条件
一些边界状况是错误频发的重灾区, 比如文件读写, 读开始, 读结尾, 读倒数第二个字符,
这些都是错误的高发区, 应当予以关注.
* 重构列表
* 重新组织函数
* 在对象之间搬移特性
* 重新组织数据
* 简化条件表达式
* 简化函数调用
* 处理概括关系
* 大型重构
* 重构, 复用与实现
* 重构工具
